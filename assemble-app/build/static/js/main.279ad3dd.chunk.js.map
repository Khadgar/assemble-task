{"version":3,"sources":["components/HomeComponent.js","components/NoMatch.js","components/ComponentOne.js","components/ComponenetTwo.js","components/ComponentThree.js","App.js","serviceWorker.js","index.js"],"names":["HomeComponent","Fragment","className","to","Component","NoMatch","ComponentOne","onClick","props","handleUserFetch","ComponentTwo","renderUserList","bind","userList","map","user","index","key","name","username","email","website","this","data","ComponentThree","App","state","users","fetchData","fetch","window","location","protocol","then","res","json","setState","catch","err","console","log","path","exact","render","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.279ad3dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/homecomponent.css';\r\n\r\nclass HomeComponent extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"homeContainer\">\r\n          <div className=\"header\">\r\n            <h1>Home Component</h1>\r\n          </div>\r\n          <div className=\"content\">\r\n            <Link to=\"/component-1\">Component 1</Link>\r\n            <Link to=\"/component-2\">Component 2</Link>\r\n            <Link to=\"/component-3\">Component 3</Link>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeComponent;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NoMatch extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>404 Page Not Found</h1>\r\n        <Link to=\"/\">Home</Link>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NoMatch;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/componentone.css';\r\n\r\nclass ComponentOne extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"componentOneContainer\">\r\n          <div className=\"header\">\r\n            <h1>Component One</h1>\r\n          </div>\r\n          <div className=\"content\">\r\n            <div\r\n              className=\"getUserListBtn\"\r\n              onClick={() => {\r\n                this.props.handleUserFetch();\r\n              }}\r\n            >\r\n              Get Users\r\n            </div>\r\n            <Link to=\"/component-2\">Component 2</Link>\r\n            <Link to=\"/\">Home</Link>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentOne;\r\n","import React, { Component } from 'react';\r\nimport '../styles/componenttwo.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass ComponentTwo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderUserList = this.renderUserList.bind(this);\r\n  }\r\n\r\n  renderUserList(userList) {\r\n    if (userList) {\r\n      return userList.map((user, index) => {\r\n        return (\r\n          <div className=\"row\" key={index}>\r\n            <div className=\"rowItem\">{user.name}</div>\r\n            <div className=\"rowItem\">{user.username}</div>\r\n            <div className=\"rowItem\">{user.email}</div>\r\n            <div className=\"rowItem\">{user.website}</div>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n    return <React.Fragment>No Users Found</React.Fragment>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"componentTwoContainer\">\r\n          <div className=\"header\">\r\n            <h1>Component Two</h1>\r\n          </div>\r\n          <div className=\"content\">{this.renderUserList(this.props.data)}</div>\r\n          <Link to=\"/\">Home</Link>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentTwo;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass ComponentThree extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"componentThreeContainer\">\r\n          <div className=\"header\">\r\n            <h1>Component Three</h1>\r\n          </div>\r\n          <div className=\"content\"></div>\r\n          <Link to=\"/\">Home</Link>\r\n\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentThree;\r\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './styles/app.css';\nimport HomeComponent from './components/HomeComponent';\nimport NoMatch from './components/NoMatch';\n\nimport ComponentOne from './components/ComponentOne';\nimport ComponentTwo from './components/ComponenetTwo';\nimport ComponentThree from './components/ComponentThree';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { users: null };\n    this.fetchData = this.fetchData.bind(this);\n  }\n\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  fetchData() {\n    fetch(`${window.location.protocol}//jsonplaceholder.typicode.com/users`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ users: data });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"mainContainer\">\n          <Switch>\n            <Route\n              path=\"/\"\n              exact\n              render={props => <HomeComponent {...props} data={this.state.users} />}\n            />\n            <Route\n              path=\"/component-1\"\n              render={props => (\n                <ComponentOne {...props} data={this.state.users} handleUserFetch={this.fetchData} />\n              )}\n            />\n            <Route\n              path=\"/component-2\"\n              render={props => <ComponentTwo {...props} data={this.state.users} />}\n            />\n            <Route\n              path=\"/component-3\"\n              render={props => <ComponentThree {...props} data={this.state.users} />}\n            />\n            <Route component={NoMatch} />\n          </Switch>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}